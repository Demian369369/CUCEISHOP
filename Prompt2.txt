Hola, eres un experto en programacion, diseno grafico, desarrollo web, marketing, comerciales y desarrollo, el dia de hoy quiero que hagas una plataforma de e-commerce llamada CUCEI SHOP, ya hay un logo cucei guardado en imagen como LogoCucei.jpg y tambien ya tenemos logo guardado en imagen como LogoCUCEISHOP.jpg quiero que ambos logos esten posicionados en puntos estrategicos de la pagina web y que tengaun una decoracion elegante este proyecto cuyo proposito sea ser una pagina principal pero intuitiva elegante y bonita con colores interactivos y profesionales para captar la atencion y admiracion de los usuarios, la pagina web tendra un buscador funcional cuyo proposito sera que los estudiantes puedan buscar rapidamente productos acorde a sus necesidades proveidos por los emprendedores, el filtro de busqueda debe servir de tal forma que si los estudiantes escriben ¨e¨ les aparezcan todos los productos relacionados con e, como habra muchos emprendedores es importante hacer un filtro de busqueda con la secciones; Todos, Alimentos, Ropa, Mascotas, Accesorios, Cosmeticos, Vapes, Videjuegos, Tecnologia, Servicios etc. y que aparezcan los negocios de cada seccion, la idea de filtro es hacer como tarjetas de cada emprendedor que seran un container de css con una imagen arriba cuadrada con bordes decorados y una breve descripcion de texto de cada negocio por ejemplo; { id: 1, name: "FoodCorner CUCEI", category: "comida", description: "Deliciosas salchipapas, hamburguesas y antojitos para estudiantes", price: "Desde $35 MXN", icon: "fas fa-hamburger", url: "foodcorner.html" }, No se te olvide que debe de haber una imagen por cada tarjeta las tengo guardadas como tarjeta1.jpg, tarjeta2.jpg, tarjeta3.jpg, ... las tarjetas van a tener al principio el nombre del negocio y una breve descripcion abajo y hasta abajo el tipo de apartado que es por ejemplo videojuegos y tambien el texto Desde con cierta cantidad de precio y hasta abajo un boton de ver negocio que al picarlo llevara a la url tambien quiero que hagas un apartado debajo del buscador de patrocinio para que emprendedores destacados se anuncien a lo grande, seria tambien de poner imagenes en un recuadro grande para publicitar emprendedores destacados, tambien quiero que en la parte superior derecha de la pagina web tengas fafa icons con los siguientes apartados; Usuario(para iniciar sesion) que al picarlo llevara a otra pagina llamada Emprendedores.html un fafa icon de un carrito de compras que tambien lleve a otra pagina, un fafa de notificacion que de las notificaciones de la pagina web (has estilos css para esta y que solo tengan un ejemplo de notificacion de recuadro chiquito para luego yo implementarle mas), tambien un fafa icon que represente la seccion acerca de que tambien mandara a otra pagina html (Todo lo que te diga mandar a otras paginas es porque las construire yo=, tambien un fafa de soporte tecnico que mandara a otra pagina html y un fafa como de colores en el que quiero que al picarle los usuarios puedan elegir una paleta de colores en la pagina web, ponle 2 paletas de color para en el futuro yo poder implementar varias yo, tambien agrega un container de chatbot que mas que IA sea de respuestas automaticas y predecibles para responder a los estudiantes y por ultimo un footer con todos los derechos reservados, la pagina debe ser profesional, intuitiva y atrapante               Las tarjetas de los emprendedores van a tener una imagen grande para que cuides ese detalle y el logo de cucei ira al pie de pagina y nuestro logo hasta arriba, para la paleta de colores puedes tomar de ejemplo el sistema de paletas de los siguientes archivos;     @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;800;900&display=swap');
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}
:root {
    --color-primary: #5a78ff;
    --color-secondary: #0957ff;
}
body{
    position: relative;
    height: 100vh;
    display: flex;
    background-image: url('https://www.chromethemer.com/wallpapers/chromebook-wallpapers/images/960/iceland-chromebook-wallpaper.jpg'); /* Reemplaza con tu imagen de fondo */
    background-attachment: fixed; 
    background-size: cover;
    justify-content: center;
    align-items: center;
}
.author-text{
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
    text-align: center;
}
.container {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    margin: 0 400px;
    min-width: 640px;
    max-width: 1000px;
    background: rgba( 255, 255, 255, 0.15 );
    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.3 );
    backdrop-filter: blur( 3px );
    -webkit-backdrop-filter: blur( 3px );
    border-radius: 10px;
    border: 1px solid rgba( 255, 255, 255, 0.18 );
    padding: 20px;
}
.container header {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    width: 100%;
    margin-bottom: 20px;
}
header h1 {
    font-size: 30px;
    font-weight: 700;
    margin-bottom: 10px;
}
.alert-message{
    width: 100%;
    transition: all 0.3s ease;
    transform: scale(0.9);
}
.alert-message.show{
    display: block;
    transform: scale(1);
}
.alert-message.hide{
    display: none;
}
header .input-section {
    width: 100%;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    height: 100%;
}
.input-section input{
    margin-right: 10px;
    max-width: 100%;
}
.todos-filter{
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    height: 100%;
    margin-bottom: 10px;
}
.todos-list {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    min-height: 100%;
    max-height: 54vh;
    overflow-y: auto;
    width: 100%;
}
.todos-list .todo-item{
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    width: 100%;
    border-bottom: 1px solid rgba( 255, 255, 255, 0.18 );
}
.todo-item p{
    margin-right: 10px;
}
.todo-item .todo-actions {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: end;
    width: 100%;
    height: 100%;
}
.todo-actions button:not(:last-child){
    margin-right: 10px;
}
.theme-switcher{
    position: absolute;
    top: 16px;
    right: 16px;
}
/* Responsive */
@media only screen and (max-width: 530px) {
    .container {
        margin: 0 20px;
        max-width: 96%;
        min-width: 96%;
    }
}
.footer {
    background-color: rgba(128, 128, 128, 0.9); 
    color: #00f7ff; 
    text-align: center; 
    padding: 10px 0;
    position: fixed; 
    left: 0;
    bottom: 0;
    width: 100%; 
    font-size: 14px; 
}
#reloj {
    position: fixed;
    top: 10px;
    right: 10px;
    color: aqua;
    font-family: Arial, sans-serif;
    font-size: 18px;
    background-color: rgba(136, 0, 255, 0.5);
    padding: 10px;
    border-radius: 8px;
    color: white;
    }

class TodoItemFormatter {
  formatTask(task) {
    return task.length > 14 ? task.slice(0, 14) + "..." : task;
  }

  formatDueDate(dueDate) {
    return dueDate || "No hay fecha limite";
  }

  formatStatus(completed) {
    return completed ? "Completado" : "Pendiente";
  }
}

class TodoManager {
  constructor(todoItemFormatter) {
    this.todos = JSON.parse(localStorage.getItem("todos")) || [];
    this.todoItemFormatter = todoItemFormatter;
  }

  addTodo(task, dueDate) {
    const newTodo = {
      id: this.getRandomId(),
      task: this.todoItemFormatter.formatTask(task),
      dueDate: this.todoItemFormatter.formatDueDate(dueDate),
      completed: false,
      status: "pending",
    };
    this.todos.push(newTodo);
    this.saveToLocalStorage();
    return newTodo;
  }

  editTodo(id, updatedTask) {
      const todo = this.todos.find((t) => t.id === id);
      if (todo) {
        todo.task = updatedTask;
        this.saveToLocalStorage();
      }
      return todo;
    }
  
    deleteTodo(id) {
      this.todos = this.todos.filter((todo) => todo.id !== id);
      this.saveToLocalStorage();
    }
  
    toggleTodoStatus(id) {
      const todo = this.todos.find((t) => t.id === id);
      if (todo) {
        todo.completed = !todo.completed;
        this.saveToLocalStorage();
      }
    }
  
    clearAllTodos() {
      if (this.todos.length > 0) {
        this.todos = [];
        this.saveToLocalStorage();
      }
    }
  
    filterTodos(status) {
      switch (status) {
        case "all":
          return this.todos;
        case "pending":
          return this.todos.filter((todo) => !todo.completed);
        case "completed":
          return this.todos.filter((todo) => todo.completed);
        default:
          return [];
      }
    }
  
    getRandomId() {
      return (
        Math.random().toString(36).substring(2, 15) +
        Math.random().toString(36).substring(2, 15)
      );
    }
  
    saveToLocalStorage() {
      localStorage.setItem("todos", JSON.stringify(this.todos));
    }
}

class UIManager {
  constructor(todoManager, todoItemFormatter) {
    this.todoManager = todoManager;
    this.todoItemFormatter = todoItemFormatter;
    this.taskInput = document.querySelector("input");
    this.dateInput = document.querySelector(".schedule-date");
    this.addBtn = document.querySelector(".add-task-button");
    this.todosListBody = document.querySelector(".todos-list-body");
    this.alertMessage = document.querySelector(".alert-message");
    this.deleteAllBtn = document.querySelector(".delete-all-btn");

  this.addEventListeners();
  this.showAllTodos();
  }

  addEventListeners() {
      this.addBtn.addEventListener("click", () => {
          this.handleAddTodo();
      });

      this.taskInput.addEventListener("keyup", (e) => {
          if (e.keyCode === 13 && this.taskInput.value.length > 0) {
              this.handleAddTodo();
          }
      });

      this.deleteAllBtn.addEventListener("click", () => {
          this.handleClearAllTodos();
      });

      const filterButtons = document.querySelectorAll(".todos-filter li");
      filterButtons.forEach((button) => {
          button.addEventListener("click", () => {
              const status = button.textContent.toLowerCase();
              this.handleFilterTodos(status);
          });
      });
  }

  handleAddTodo() {
    const task = this.taskInput.value;
    const dueDate = this.dateInput.value;
    if (task === "") {
      this.showAlertMessage("Porfavor Crea una tarea", "error");
    } else {
      const newTodo = this.todoManager.addTodo(task, dueDate);
      this.showAllTodos();
      this.taskInput.value = "";
      this.dateInput.value = "";
      this.showAlertMessage("Tarea Agregada con exito", "Listo");
    }
  }

  handleClearAllTodos() {
    this.todoManager.clearAllTodos();
    this.showAllTodos();
    this.showAlertMessage("Tareas Eliminadas con exito", "Listo");
  }

  showAllTodos() {
    const todos = this.todoManager.filterTodos("all");
    this.displayTodos(todos);
  }

  displayTodos(todos) {

      this.todosListBody.innerHTML = "";
      
      if (todos.length === 0) {
          this.todosListBody.innerHTML = `<tr><td colspan="5" class="text-center">No hay tareas</td></tr>`;
          return;
        }
        
      todos.forEach((todo) => {
        this.todosListBody.innerHTML += `
          <tr class="todo-item" data-id="${todo.id}">
            <td>${this.todoItemFormatter.formatTask(todo.task)}</td>
            <td>${this.todoItemFormatter.formatDueDate(todo.dueDate)}</td>
            <td>${this.todoItemFormatter.formatStatus(todo.completed)}</td>
            <td>
              <button class="btn btn-warning btn-sm" onclick="uiManager.handleEditTodo('${
                todo.id
              }')">
                <i class="bx bx-edit-alt bx-bx-xs"></i>    
              </button>
              <button class="btn btn-success btn-sm" onclick="uiManager.handleToggleStatus('${
                todo.id
              }')">
                <i class="bx bx-check bx-xs"></i>
              </button>
              <button class="btn btn-error btn-sm" onclick="uiManager.handleDeleteTodo('${
                todo.id
              }')">
                <i class="bx bx-trash bx-xs"></i>
              </button>
            </td>
          </tr>
        `;
      });
    }
    

  
handleEditTodo(id) {
  const todo = this.todoManager.todos.find((t) => t.id === id);
  if (todo) {
    this.taskInput.value = todo.task;
    this.todoManager.deleteTodo(id);

    const handleUpdate = () => {
      this.addBtn.innerHTML = "<i class='bx bx-plus bx-sm'></i>";
      this.showAlertMessage("Tarea Agregada con exito", "Listo");
      this.showAllTodos();
      this.addBtn.removeEventListener("click", handleUpdate);
    };

    this.addBtn.innerHTML = "<i class='bx bx-check bx-sm'></i>";
    this.addBtn.addEventListener("click", handleUpdate);
  }
}


handleToggleStatus(id) {
this.todoManager.toggleTodoStatus(id);
this.showAllTodos();
}

handleDeleteTodo(id) {
this.todoManager.deleteTodo(id);
this.showAlertMessage("Tarea Eliminada con exito", "Listo");
this.showAllTodos();
}


handleFilterTodos(status) {
  const filteredTodos = this.todoManager.filterTodos(status);
  this.displayTodos(filteredTodos);
}


showAlertMessage(message, type) {
const alertBox = `
  <div class="alert alert-${type} shadow-lg mb-5 w-full">
    <div>
      <span>${message}</span>
    </div>
  </div>
`;
this.alertMessage.innerHTML = alertBox;
this.alertMessage.classList.remove("hide");
this.alertMessage.classList.add("show");
setTimeout(() => {
  this.alertMessage.classList.remove("show");
  this.alertMessage.classList.add("hide");
}, 3000);
}
}

class ThemeSwitcher {
constructor(themes, html) {
  this.themes = themes;
  this.html = html;
  this.init();
}

init() {
  const theme = this.getThemeFromLocalStorage();
  if (theme) {
    this.setTheme(theme);
  }

  this.addThemeEventListeners();
}

addThemeEventListeners() {
  this.themes.forEach((theme) => {
    theme.addEventListener("click", () => {
      const themeName = theme.getAttribute("theme");
      this.setTheme(themeName);
      this.saveThemeToLocalStorage(themeName);
    });
  });
}

setTheme(themeName) {
  this.html.setAttribute("data-theme", themeName);
}

saveThemeToLocalStorage(themeName) {
  localStorage.setItem("theme", themeName);
}

getThemeFromLocalStorage() {
  return localStorage.getItem("theme");
}
}



const todoItemFormatter = new TodoItemFormatter();
const todoManager = new TodoManager(todoItemFormatter);
const uiManager = new UIManager(todoManager, todoItemFormatter);
const themes = document.querySelectorAll(".theme-item");
const html = document.querySelector("html");
const themeSwitcher = new ThemeSwitcher(themes, html);

function actualizarReloj() {
  const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
  const diasSemana = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'];
  
  const ahora = new Date();
  const diaSemana = diasSemana[ahora.getDay()];
  const dia = ahora.getDate();
  const mes = meses[ahora.getMonth()];
  const año = ahora.getFullYear();
  
  let horas = ahora.getHours();
  const minutos = ahora.getMinutes().toString().padStart(2, '0');
  const ampm = horas >= 12 ? 'PM' : 'AM';
  horas = horas % 12;
  horas = horas ? horas : 12; // El '0' se convierte en '12'
  
  const horaActual = `${horas}:${minutos} ${ampm}`;
  const fechaActual = `${diaSemana}, ${dia} de ${mes} del ${año}`;
  
  document.getElementById('reloj').innerHTML = `${fechaActual} - ${horaActual}`;
  }

  setInterval(actualizarReloj, 1000); 
  actualizarReloj();


<!DOCTYPE html>
<html lang="en" data-theme="night">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/CosasImportantes.css">
    <link href="https://cdn.jsdelivr.net/npm/daisyui@2.18.0/dist/full.css" rel="stylesheet" type="text/css" />
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2/dist/tailwind.min.css" rel="stylesheet" type="text/css" />
    <link href='https://unpkg.com/boxicons@2.1.2/css/boxicons.min.css' rel='stylesheet'>
    <link rel="icon" type="image/svg+xml" href="images/Agujero.jpeg">
    <title>Cosas Importantes</title>
</head>
<body>
    <div id="reloj"></div>
    <div class="container">
        <header>
            <h1>Cosas Importantes</h1>
            <div class="alert-message"></div>
            <div class="input-section">
                <input type="text" placeholder="Agregar cosa importante" class="input input-bordered input-secondary w-full max-w-xs" />
                <input type="date" class="input input-bordered input-secondary w-full max-w-xs schedule-date" />
                <button class="btn btn-secondary add-task-button">
                    <i class="bx bx-plus bx-sm"></i>
                </button>
            </div>
        </header>

        <div class="todos-filter">
            <div class="dropdown">
                <label tabindex="0" class="btn m-1">Filtro</label>
                <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                    <li onclick="filterTodos('all')"><a>Todo</a></li>
                    <li onclick="filterTodos('pending')"><a>Pendiente</a></li>
                    <li onclick="filterTodos('completed')"><a>Completado</a></li>
                </ul>
            </div>
            <button class="btn btn-secondary delete-all-btn">
                Eliminar Todo
            </button><br>
            <button class="btn btn-secondary add-task-button" type="text"onclick="window.location.href='Inicio.html';">Inicio</button>
            <button class="btn btn-secondary add-task-button" type="text"onclick="window.location.href='UDGMaterias.html';">UDG</button>
            <button class="btn btn-secondary add-task-button" type="text"onclick="window.location.href='Calendario.html';">Calendario</button>

        </div>
         <table class="table w-full">
            <thead>
                <tr>
                    <th>Tarea</th>
                    <th>Fecha Limite</th>
                    <th>Estadisticas</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody class="todos-list-body">
            </tbody>
        </table>

    </div>
    <div class="theme-switcher">
        <div class="dropdown dropdown-left">
            <label tabindex="0" class="btn m-1">
                <i class='bx bxs-palette bx-sm'></i>
            </label>
            <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                <li class="theme-item" theme="cupcake"><a>Pastel</a></li>
                <li class="theme-item" theme="dark"><a>Oscuro</a></li>
                <li class="theme-item" theme="light"><a>Iluminado</a></li>
                <li class="theme-item" theme="bumblebee"><a>Amarillo</a></li>
                <li class="theme-item" theme="synthwave"><a>Olas</a></li>
                <li class="theme-item" theme="halloween"><a>Naranja</a></li>
                <li class="theme-item" theme="fantasy"><a>Fantasia</a></li>
                <li class="theme-item" theme="dracula"><a>dracula</a></li>
                <li class="theme-item" theme="aqua"><a>aqua</a></li>
                <li class="theme-item" theme="luxury"><a>luxury</a></li>
                <li class="theme-item" theme="night"><a>Noche</a></li>
            </ul>
        </div>
    </div>
    <script src="js/CosasImportantes.js"></script>

</body>
</html>