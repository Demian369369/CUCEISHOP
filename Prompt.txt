Has un sitio llamativo, elegante y moderno 100% atrapante y funcional Eres un experto en diseno grafico, programacion y desarrollo web, el dia de hoy quiero que hagas la pagina principal de una e-commerce de cucei, sera una plataforma principal con una barra de busqueda que tenga filtros de cada negocio profesionalmente, la barra de busqueda debe estar adaptada a futuros nuevos negocios de emprendimiento que al agregarlos en automatico aparezcan en la barra de busqueda, quiero que en la parte inferior de la barra de busqueda hagas un banner en recuadro cuadrado donde se alternaran imagenes que seran para darles publicidad a los emprendedores del cucei, quiero que la pagina sea elegante, minimalista, profesional y apta para todas las plataformas, usa fafa icons y nada de emojis, quiero tambien en la parte superior izquierda hagas la parte de secciones complementarias donde habra un fafa icon de un usuario que al precionarlo lleve a un index llamado IniciarSesion.html, un fafaicon de un carrito de compras que al precionarlo lleve a otra pagina web que yo hare pero basicamente esa pagina web sera de lo mas comprando en emprendimiento cucei en esa semana , un fafa icon de una campanita que dara notificaciones de la pagina en un container emergente y elegante y un fafa de acerca de{para hablar del origen de la pagina y acerca de nosotros tambien solo has que ese de acerca de lleve a otra pagina para hacerla yo, y un fafa de soporte tecnico que tambien llevara a otra pagina, quiero muchas cosas y secciones profesionales de esta pagina web, que sea profesional, que al escribir en la barra de busqueda aparezca un recudadro de cada emprendedor y una breve descripcion de lo que vende los precios etc. quiero que la pagina sea tan profesional al punto de no tener competencias, Quiero una p√°gina web principal para un proyecto universitario llamado "CUCEI Market", una plataforma que permite a los estudiantes buscar productos y servicios ofrecidos por emprendedores del CUCEI. La p√°gina debe tener:
Un dise√±o moderno y responsivo, estilo limpio y profesional.
Un encabezado con el logo o nombre del sitio: "CUCEI Market".
Un campo de b√∫squeda principal para que los usuarios busquen productos o servicios (por ejemplo: "salchipapas", "copias", "accesorios").
Una lista de tarjetas de negocios (m√≠nimo 6 ejemplos) que se filtren en tiempo real conforme el usuario escribe.
Cada tarjeta debe incluir: nombre del negocio, imagen representativa, categor√≠a (comida, papeler√≠a, etc.), y un bot√≥n que lleve a la p√°gina web individual de ese negocio. Tecnolog√≠as permitidas:
HTML
CSS (puede ser Tailwind o estilos embebidos)
JavaScript para la b√∫squeda en tiempo real (sin backend). JSON para guardar informacionExtra opcional: A√±adir √≠conos de Font Awesome por categor√≠a en las tarjetas. Tambien asegurate de en la propia pagina web principal y junto al buscador poner un filtro automatico al buscar para mayor presicion, sera un filtro de servicios que diga todos, comida, accesorios, ropa, servicios, decoraciones, videojuegos etc. (da permiso en el contenedor para expandirlo mas adelante por si es necesario hacer mas secciones)              Recuerda usar un tipo de letra elegante y hacer que el sitio web sea super intuitivo, tambien recuerda que para las categorias de los negocios no es necesario que agregues texto ya que las  tarjetas de cada emprendedor seran iagenes pero que al picarlas lleven a esa pagina web por ejemplo al buscar en el filtro comida que aparezcan las imagenes de comida (yo las pongo) pero que los cuadros de container esten bonitos, son varios y van a ser muchos emprendedores para que contemples eso y que quede bien para celular ya que es la plataforma donde mas gente lo usara, has que el filtro de busqueda funcione correctamente, si no escribo nada que aparezcan todos, si escribo a las imagenes que tengan de titulo a, si pico comida todas las imagenes que tengan comida (puedes usar uin Json y basarte con IDs entre otras cosas profesionales, tambien que al poner comida y escribir g por ejemplo aparezcan solo las comidas con g y asi para cada letra y filtro

Idea general, impresioname üß© Nombre del Proyecto
CUCEI Market ‚Äî Plataforma e-commerce universitaria para emprendedores del CUCEI.
üéØ Objetivo General
Crear una plataforma web que permita a los estudiantes del CUCEI descubrir, explorar y apoyar emprendimientos estudiantiles a trav√©s de una interfaz elegante, responsiva y funcional, accesible desde cualquier dispositivo.
‚úÖ Objetivos Espec√≠ficos
1. Centralizar la oferta de productos y servicios estudiantiles del CUCEI.
2. Facilitar la b√∫squeda mediante filtros y barra de b√∫squeda inteligente.
3. Dar visibilidad a los negocios mediante tarjetas con informaci√≥n relevante.
4. Promover a los emprendedores a trav√©s de espacios publicitarios integrados.
5. Permitir escalabilidad, permitiendo agregar nuevos negocios sin afectar la estructura.
üß± Estructura General de la P√°gina Principal
1. Encabezado (Header)
* Logo / Nombre del sitio: "CUCEI Market"
* √çconos de navegaci√≥n (Font Awesome):
   * üë§ Usuario ‚Üí Enlace a IniciarSesion.html
   * üõí Carrito de compras ‚Üí Enlace a p√°gina de productos m√°s comprados
   * üîî Notificaciones ‚Üí Muestra contenedor emergente
   * ‚ÑπÔ∏è Acerca de ‚Üí Enlace a acercaDe.html
   * üéß Soporte t√©cnico ‚Üí Enlace a soporte.html
2. Secci√≥n de B√∫squeda Principal
* Input de b√∫squeda con filtrado en tiempo real de tarjetas de negocios.
* Filtro de categor√≠as (expansible en el futuro), con botones tipo ‚Äúpill‚Äù:
   * Todos
   * Comida
   * Ropa
   * Accesorios
   * Servicios
   * Decoraciones
   * Videojuegos
   * (Expansible)
3. Banner de Publicidad
* Contenedor visual cuadrado, centrado debajo del buscador.
* Ciclo de im√°genes promocionales rotativas (automatizado o manual).
* Espacio destinado a promocionar negocios destacados del CUCEI.
4. Listado de Tarjetas de Negocios
* Generaci√≥n din√°mica desde un JSON local.
* Cada tarjeta incluye:
   * Imagen representativa del negocio
   * Nombre del negocio
   * Descripci√≥n corta
   * Categor√≠a con √≠cono
   * Bot√≥n ‚ÄúVer m√°s‚Äù que enlaza a su propia subp√°gina individual
5. Pie de P√°gina (Footer)
* Texto de derechos reservados: ‚Äú¬© 2025 CUCEI Market ‚Äî Todos los derechos reservados.‚Äù
‚öôÔ∏è Funcionalidades T√©cnicas
* Filtrado por categor√≠a y texto combinados en tiempo real (JavaScript).
* Dise√±o responsive para adaptarse a celulares, tablets y escritorios.
* Componentes reusables para futuros negocios, √≠conos y secciones.
* Interactividad sin backend, ideal para deploy en GitHub Pages.
* Publicidad visual rotativa (est√°tica por ahora, expandible a carrusel animado).
* Estructura modular: cada negocio puede tener su propio repositorio GitHub Pages.
üí° Escalabilidad y Futuras Mejores
* Sistema de usuarios: inicio de sesi√≥n, perfil de emprendedor.
* Panel de administraci√≥n para agregar negocios desde UI.
* Carrito funcional (con localStorage o backend).
* Sistema de notificaciones real (ej. con Firebase o Push.js).
* Integraci√≥n de pagos (MercadoPago, Stripe, etc.).
üìå Ventajas del Proyecto
* Aplicaci√≥n real dentro de una comunidad activa (CUCEI).
* Posibilidad de monetizar con banners y servicios de dise√±o web.
* Alto potencial para uso como proyecto modular universitario.
* Exposici√≥n profesional como desarrollador web ante la comunidad educativa.






Quiero que adicionalmente Agregues un Chatbot en la pagina web (No IA, pero si con respuestas automaticas de servicio a cliente)
Basandote en la pagina web solicitada quiero que hagas un fafa icon emergente en el banner superior para poder cambiar la paleta de colores de toda la pagina web (Solo dame el codigo necesario para implementar la paleta de colores, no me des lo demas que ya esta hecho)   la pagina principal es el documento Cucei.html                                         @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;800;900&display=swap');
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}
:root {
    --color-primary: 
#5a78ff;
    --color-secondary: 
#0957ff;
}
body{
    position: relative;
    height: 100vh;
    display: flex;
    background-image: url('https://www.chromethemer.com/wallpapers/chromebook-wallpapers/images/960/iceland-chromebook-wallpaper.jpg'); /* Reemplaza con tu imagen de fondo /
    background-attachment: fixed; 
    background-size: cover;
    justify-content: center;
    align-items: center;
}
.author-text{
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
    text-align: center;
}
.container {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    margin: 0 400px;
    min-width: 640px;
    max-width: 1000px;
    background: rgba( 255, 255, 255, 0.15 );
    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.3 );
    backdrop-filter: blur( 3px );
    -webkit-backdrop-filter: blur( 3px );
    border-radius: 10px;
    border: 1px solid rgba( 255, 255, 255, 0.18 );
    padding: 20px;
}
.container header {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    width: 100%;
    margin-bottom: 20px;
}
header h1 {
    font-size: 30px;
    font-weight: 700;
    margin-bottom: 10px;
}
.alert-message{
    width: 100%;
    transition: all 0.3s ease;
    transform: scale(0.9);
}
.alert-message.show{
    display: block;
    transform: scale(1);
}
.alert-message.hide{
    display: none;
}
header .input-section {
    width: 100%;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    height: 100%;
}
.input-section input{
    margin-right: 10px;
    max-width: 100%;
}
.todos-filter{
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    height: 100%;
    margin-bottom: 10px;
}
.todos-list {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    min-height: 100%;
    max-height: 54vh;
    overflow-y: auto;
    width: 100%;
}
.todos-list .todo-item{
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    width: 100%;
    border-bottom: 1px solid rgba( 255, 255, 255, 0.18 );
}
.todo-item p{
    margin-right: 10px;
}
.todo-item .todo-actions {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: end;
    width: 100%;
    height: 100%;
}
.todo-actions button:not(:last-child){
    margin-right: 10px;
}
.theme-switcher{
    position: absolute;
    top: 16px;
    right: 16px;
}
/ Responsive */
@media only screen and (max-width: 530px) {
    .container {
        margin: 0 20px;
        max-width: 96%;
        min-width: 96%;
    }
}
.footer {
    background-color: rgba(128, 128, 128, 0.9); 
    color: 
#00f7ff; 
    text-align: center; 
    padding: 10px 0;
    position: fixed; 
    left: 0;
    bottom: 0;
    width: 100%; 
    font-size: 14px; 
}
#reloj {
    position: fixed;
    top: 10px;
    right: 10px;
    color: aqua;
    font-family: Arial, sans-serif;
    font-size: 18px;
    background-color: rgba(136, 0, 255, 0.5);
    padding: 10px;
    border-radius: 8px;
    color: white;
    }            

!DOCTYPE html>
<html lang="en" data-theme="night">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/CosasImportantes.css">
    <link href="https://cdn.jsdelivr.net/npm/daisyui@2.18.0/dist/full.css" rel="stylesheet" type="text/css" />
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2/dist/tailwind.min.css" rel="stylesheet" type="text/css" />
    <link href='https://unpkg.com/boxicons@2.1.2/css/boxicons.min.css' rel='stylesheet'>
    <link rel="icon" type="image/svg+xml" href="images/Agujero.jpeg">
    <title>Cosas Importantes</title>
</head>
<body>
    <div id="reloj"></div>
    <div class="container">
        <header>
            <h1>Cosas Importantes</h1>
            <div class="alert-message"></div>
            <div class="input-section">
                <input type="text" placeholder="Agregar cosa importante" class="input input-bordered input-secondary w-full max-w-xs" />
                <input type="date" class="input input-bordered input-secondary w-full max-w-xs schedule-date" />
                <button class="btn btn-secondary add-task-button">
                    <i class="bx bx-plus bx-sm"></i>
                </button>
            </div>
        </header>

        <div class="todos-filter">
            <div class="dropdown">
                <label tabindex="0" class="btn m-1">Filtro</label>
                <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                    <li onclick="filterTodos('all')"><a>Todo</a></li>
                    <li onclick="filterTodos('pending')"><a>Pendiente</a></li>
                    <li onclick="filterTodos('completed')"><a>Completado</a></li>
                </ul>
            </div>
            <button class="btn btn-secondary delete-all-btn">
                Eliminar Todo
            </button><br>
            <button class="btn btn-secondary add-task-button" type="text"onclick="window.location.href='Inicio.html';">Inicio</button>
            <button class="btn btn-secondary add-task-button" type="text"onclick="window.location.href='UDGMaterias.html';">UDG</button>
            <button class="btn btn-secondary add-task-button" type="text"onclick="window.location.href='Calendario.html';">Calendario</button>

        </div>
         <table class="table w-full">
            <thead>
                <tr>
                    <th>Tarea</th>
                    <th>Fecha Limite</th>
                    <th>Estadisticas</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody class="todos-list-body">
            </tbody>
        </table>

    </div>
    <div class="theme-switcher">
        <div class="dropdown dropdown-left">
            <label tabindex="0" class="btn m-1">
                <i class='bx bxs-palette bx-sm'></i>
            </label>
            <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                <li class="theme-item" theme="cupcake"><a>Pastel</a></li>
                <li class="theme-item" theme="dark"><a>Oscuro</a></li>
                <li class="theme-item" theme="light"><a>Iluminado</a></li>
                <li class="theme-item" theme="bumblebee"><a>Amarillo</a></li>
                <li class="theme-item" theme="synthwave"><a>Olas</a></li>
                <li class="theme-item" theme="halloween"><a>Naranja</a></li>
                <li class="theme-item" theme="fantasy"><a>Fantasia</a></li>
                <li class="theme-item" theme="dracula"><a>dracula</a></li>
                <li class="theme-item" theme="aqua"><a>aqua</a></li>
                <li class="theme-item" theme="luxury"><a>luxury</a></li>
                <li class="theme-item" theme="night"><a>Noche</a></li>
            </ul>
        </div>
    </div>
    <script src="js/CosasImportantes.js"></script>

</body>
</html>

class TodoItemFormatter {
  formatTask(task) {
    return task.length > 14 ? task.slice(0, 14) + "..." : task;
  }

  formatDueDate(dueDate) {
    return dueDate || "No hay fecha limite";
  }

  formatStatus(completed) {
    return completed ? "Completado" : "Pendiente";
  }
}

class TodoManager {
  constructor(todoItemFormatter) {
    this.todos = JSON.parse(localStorage.getItem("todos")) || [];
    this.todoItemFormatter = todoItemFormatter;
  }

  addTodo(task, dueDate) {
    const newTodo = {
      id: this.getRandomId(),
      task: this.todoItemFormatter.formatTask(task),
      dueDate: this.todoItemFormatter.formatDueDate(dueDate),
      completed: false,
      status: "pending",
    };
    this.todos.push(newTodo);
    this.saveToLocalStorage();
    return newTodo;
  }

  editTodo(id, updatedTask) {
      const todo = this.todos.find((t) => t.id === id);
      if (todo) {
        todo.task = updatedTask;
        this.saveToLocalStorage();
      }
      return todo;
    }
  
    deleteTodo(id) {
      this.todos = this.todos.filter((todo) => todo.id !== id);
      this.saveToLocalStorage();
    }
  
    toggleTodoStatus(id) {
      const todo = this.todos.find((t) => t.id === id);
      if (todo) {
        todo.completed = !todo.completed;
        this.saveToLocalStorage();
      }
    }
  
    clearAllTodos() {
      if (this.todos.length > 0) {
        this.todos = [];
        this.saveToLocalStorage();
      }
    }
  
    filterTodos(status) {
      switch (status) {
        case "all":
          return this.todos;
        case "pending":
          return this.todos.filter((todo) => !todo.completed);
        case "completed":
          return this.todos.filter((todo) => todo.completed);
        default:
          return [];
      }
    }
  
    getRandomId() {
      return (
        Math.random().toString(36).substring(2, 15) +
        Math.random().toString(36).substring(2, 15)
      );
    }
  
    saveToLocalStorage() {
      localStorage.setItem("todos", JSON.stringify(this.todos));
    }
}

class UIManager {
  constructor(todoManager, todoItemFormatter) {
    this.todoManager = todoManager;
    this.todoItemFormatter = todoItemFormatter;
    this.taskInput = document.querySelector("input");
    this.dateInput = document.querySelector(".schedule-date");
    this.addBtn = document.querySelector(".add-task-button");
    this.todosListBody = document.querySelector(".todos-list-body");
    this.alertMessage = document.querySelector(".alert-message");
    this.deleteAllBtn = document.querySelector(".delete-all-btn");

  this.addEventListeners();
  this.showAllTodos();
  }

  addEventListeners() {
      this.addBtn.addEventListener("click", () => {
          this.handleAddTodo();
      });

      this.taskInput.addEventListener("keyup", (e) => {
          if (e.keyCode === 13 && this.taskInput.value.length > 0) {
              this.handleAddTodo();
          }
      });

      this.deleteAllBtn.addEventListener("click", () => {
          this.handleClearAllTodos();
      });

      const filterButtons = document.querySelectorAll(".todos-filter li");
      filterButtons.forEach((button) => {
          button.addEventListener("click", () => {
              const status = button.textContent.toLowerCase();
              this.handleFilterTodos(status);
          });
      });
  }

  handleAddTodo() {
    const task = this.taskInput.value;
    const dueDate = this.dateInput.value;
    if (task === "") {
      this.showAlertMessage("Porfavor Crea una tarea", "error");
    } else {
      const newTodo = this.todoManager.addTodo(task, dueDate);
      this.showAllTodos();
      this.taskInput.value = "";
      this.dateInput.value = "";
      this.showAlertMessage("Tarea Agregada con exito", "Listo");
    }
  }

  handleClearAllTodos() {
    this.todoManager.clearAllTodos();
    this.showAllTodos();
    this.showAlertMessage("Tareas Eliminadas con exito", "Listo");
  }

  showAllTodos() {
    const todos = this.todoManager.filterTodos("all");
    this.displayTodos(todos);
  }

  displayTodos(todos) {

      this.todosListBody.innerHTML = "";
      
      if (todos.length === 0) {
          this.todosListBody.innerHTML = `<tr><td colspan="5" class="text-center">No hay tareas</td></tr>`;
          return;
        }
        
      todos.forEach((todo) => {
        this.todosListBody.innerHTML += `
          <tr class="todo-item" data-id="${todo.id}">
            <td>${this.todoItemFormatter.formatTask(todo.task)}</td>
            <td>${this.todoItemFormatter.formatDueDate(todo.dueDate)}</td>
            <td>${this.todoItemFormatter.formatStatus(todo.completed)}</td>
            <td>
              <button class="btn btn-warning btn-sm" onclick="uiManager.handleEditTodo('${
                todo.id
              }')">
                <i class="bx bx-edit-alt bx-bx-xs"></i>    
              </button>
              <button class="btn btn-success btn-sm" onclick="uiManager.handleToggleStatus('${
                todo.id
              }')">
                <i class="bx bx-check bx-xs"></i>
              </button>
              <button class="btn btn-error btn-sm" onclick="uiManager.handleDeleteTodo('${
                todo.id
              }')">
                <i class="bx bx-trash bx-xs"></i>
              </button>
            </td>
          </tr>
        `;
      });
    }
    

  
handleEditTodo(id) {
  const todo = this.todoManager.todos.find((t) => t.id === id);
  if (todo) {
    this.taskInput.value = todo.task;
    this.todoManager.deleteTodo(id);

    const handleUpdate = () => {
      this.addBtn.innerHTML = "<i class='bx bx-plus bx-sm'></i>";
      this.showAlertMessage("Tarea Agregada con exito", "Listo");
      this.showAllTodos();
      this.addBtn.removeEventListener("click", handleUpdate);
    };

    this.addBtn.innerHTML = "<i class='bx bx-check bx-sm'></i>";
    this.addBtn.addEventListener("click", handleUpdate);
  }
}


handleToggleStatus(id) {
this.todoManager.toggleTodoStatus(id);
this.showAllTodos();
}

handleDeleteTodo(id) {
this.todoManager.deleteTodo(id);
this.showAlertMessage("Tarea Eliminada con exito", "Listo");
this.showAllTodos();
}


handleFilterTodos(status) {
  const filteredTodos = this.todoManager.filterTodos(status);
  this.displayTodos(filteredTodos);
}


showAlertMessage(message, type) {
const alertBox = `
  <div class="alert alert-${type} shadow-lg mb-5 w-full">
    <div>
      <span>${message}</span>
    </div>
  </div>
`;
this.alertMessage.innerHTML = alertBox;
this.alertMessage.classList.remove("hide");
this.alertMessage.classList.add("show");
setTimeout(() => {
  this.alertMessage.classList.remove("show");
  this.alertMessage.classList.add("hide");
}, 3000);
}
}

class ThemeSwitcher {
constructor(themes, html) {
  this.themes = themes;
  this.html = html;
  this.init();
}

init() {
  const theme = this.getThemeFromLocalStorage();
  if (theme) {
    this.setTheme(theme);
  }

  this.addThemeEventListeners();
}

addThemeEventListeners() {
  this.themes.forEach((theme) => {
    theme.addEventListener("click", () => {
      const themeName = theme.getAttribute("theme");
      this.setTheme(themeName);
      this.saveThemeToLocalStorage(themeName);
    });
  });
}

setTheme(themeName) {
  this.html.setAttribute("data-theme", themeName);
}

saveThemeToLocalStorage(themeName) {
  localStorage.setItem("theme", themeName);
}

getThemeFromLocalStorage() {
  return localStorage.getItem("theme");
}
}



const todoItemFormatter = new TodoItemFormatter();
const todoManager = new TodoManager(todoItemFormatter);
const uiManager = new UIManager(todoManager, todoItemFormatter);
const themes = document.querySelectorAll(".theme-item");
const html = document.querySelector("html");
const themeSwitcher = new ThemeSwitcher(themes, html);

function actualizarReloj() {
  const meses = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
  const diasSemana = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado'];
  
  const ahora = new Date();
  const diaSemana = diasSemana[ahora.getDay()];
  const dia = ahora.getDate();
  const mes = meses[ahora.getMonth()];
  const a√±o = ahora.getFullYear();
  
  let horas = ahora.getHours();
  const minutos = ahora.getMinutes().toString().padStart(2, '0');
  const ampm = horas >= 12 ? 'PM' : 'AM';
  horas = horas % 12;
  horas = horas ? horas : 12; // El '0' se convierte en '12'
  
  const horaActual = `${horas}:${minutos} ${ampm}`;
  const fechaActual = `${diaSemana}, ${dia} de ${mes} del ${a√±o}`;
  
  document.getElementById('reloj').innerHTML = `${fechaActual} - ${horaActual}`;
  }

  setInterval(actualizarReloj, 1000); 
  actualizarReloj();




  Tambien trata de usar Paletas de colores acorde a colores llamativos para una e commerce Paleta de colores mas dinamica 



  El nombre del Proyecto Sera CUCEI SHOP, para el apartado de patrocinadores recuerda que se mostrara una imagen de ciertos emprendedores
  lo mismo para las tarjetas del buscador, debe de ser una imagen con descripcion (yo pondira cada imagen) que al hacerle click lleve a la pagina de esos emprendedores